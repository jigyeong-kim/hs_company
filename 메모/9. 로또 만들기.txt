6장 로또만들기

***비동기

- 비동기는 동기의 반대말
- 실제로 코딩한 순서와 다르게 작동하는 코드를 비동기 코드
- 지금까지 사용했던 이벤트 리스너가 대표적인 비동기 코드

***피셔-예이츠 셔플

- 전체를 무작위로 섞어서 랜덤으로 나옴

>>>1분 퀴즈
-----------------------------------
1 피셔-예이츠 셔플을 구현할 때 for 문 대신 while 문을 쓴 이유가 있습니다. while 문 대신 for 문으로 만들어 보고, 어느 때 while 문이 좋고, 어느 때 for 문이 좋은지 느껴 보세요. 단, for 문에서 사용하는 변수 i의 시작 값이 candidate.length가 되게 해 보세요.

const candidate = Array(45).fill().map((v, i) => i + 1);
const shuffle=[];
for (let i = candidate.length; i > 0; i--) {
  const random = Math.floor(Math.random() * i); // 무작위 인덱스 뽑기
  const spliceArray = candidate.splice(random, 1); // 뽑은 값 하나를 잘라 배열에 넣기
  const value = spliceArray[0]; // 배열에 들어 있는 값을 꺼내어
  shuffle.push(value); // shuffle 배열에 넣기
}
console.log(shuffle);

//while문은 조건문이 간단하면 쓰기 좋음
//while문은 몇번 반복할지 애매할때 쓰기 좋음

----------------------- ------------

6-3. 공정렬하기

***sort

- 비교 함수
- 원본을 바꿈, slice붙이면 원본 
--------------------------------------
 (a, b) => a - b //오름차순
 (a, b) => b - a //내림차순

 //a - b가 0보다 크면 b, a순서로 정렬
 //a - b가 0보다 작으면 a, b순서로 정렬
 //0이면 순서가 유지
 --------------------------------------

***slice, splice
- slice(start, end)
- slice는 배열에 추가 못함
- slice는 원래 배열을 유지
- slice는 뒤에서부터 가능

- splice(start, 갯수, 추가할것들)
- splice 배열 수정

-----------------------------------------
arr = [1, 2, 3, 4, 5]

arr.slice().sort((a, b) => a - b)

arr.slice().sort((a, b) => {
  console.log(a, b, a - b);
  return a - b;
})

//slice는 arr배열 원본은 유지한채 정렬
-----------------------------------------

-----------------------------------------
// 알파벳도 정렬 가능 
// 첫번째 인덱스 알파벳 순서대로 정렬

arr = [a, b, c, d, e]

arr.slice().sort((a, b) => a[0].charCodeAt() - b[0].charCodeAt())

// 사전순으로 알파벳 정렬, 한글도 가능
arr.slice().sort((a, b) => a.localeCompare(b))
-----------------------------------------

>>>1분 퀴즈
-----------------------------------------
2 오름차순으로 정렬했던 공을 내림차순으로 다시 정렬해 보세요.

 const winBalls = shuffle.slice(0, 6).sort((a, b) => b - a); 
----------------------------------------- 

6-4. 일정 시간 후에 실행하기

***타이머 setTimeout

- 시간이 정확하지 않음
- 기존에 하고 있던 일이 끝나야 setTimeout에 지정한 작업이 실행
-------------------------------------------
setTimeout(() => {// 내용}, 밀리초);

setTimeout(() => console.log('hello'), 1000);
//1000밀리 초 뒤에 hello
//1000은 1초
-------------------------------------------

***중복제거 refactoring  

>>>1분퀴즈
------------------------------------------
3 3.5초 뒤에 다음 func 함수를 실행되게 해 보세요.

function func() { 
  console.log('hello'); 
}

setTimeout(() => {
  func();
}, 3500);

setTimeout(func, 3500);
------------------------------------------

6-5.타이머와 반복문 같이 사용하기

***var와 let의 차이

-변수는 scope(범위)라는 것을 가짐
- var는 함수 스코프, let은 블록 스코프
