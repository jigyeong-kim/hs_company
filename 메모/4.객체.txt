2 - 6 객체 

자료형의 일종
객체의 종류로는 배열(array), 함수(function), 배열이나 함수가 아닌 객체

2 - 6 - 1 배열 

다양한 값, 다양한 자료형들을 하나로 묶어논 것
---------------------------------
const apple = '사과';
const orange = '오렌지';
const pear = '배';
const strawberry = '딸기';

const fruits = ['사과', '오렌지', '배', '딸기'];
---------------------------------

네 종류의 과일을 fruits이라는 변수로 묶고 배열을 만들려면 대괄호([ ])로 값들을 감싸주기 
요소(element)들은 쉼표로 구분하기

---------------------------------
> const fruits = ['사과', '오렌지', '배', '딸기'];
  console.log(fruits[0]);
  console.log(fruits[1]);
  console.log(fruits[2]);
  console.log(fruits[3]);

  사과
  오렌지
  배
  딸기
---------------------------------

프로그래밍에서는 이런 자릿수를 인덱스(index)라고 함

★배열의 요소 개수 구하기

배열(변수) 이름 뒤에 .length를 붙이기

--------------------------------------------------
> const everything = ['사과', 1, undefined, true, '배열', null];
  console.log(everything.length);

  6
--------------------------------------------------

★마지막 요소의 인덱스 값 구하는 방법

배열의 요소 개수 - 1 = 마지막 요소의 인덱스 값
-------------------------------------------------
> const Element = ['a', 'b', 'c', 'd', 'e'];
  console.log(Element [ Element.length - 1]);

  e
------------------------------------------------


★배열에 요소 추가하기

------------------------------------------------
> const target = ['a', 'b', 'c', 'd', 'e'];

  target[5] = 'f'; // 원하는 인덱스값 대입
  //target[target.length] ='f';

  console.log(target);

  (6) ["a", "b", "c", "d", "e", "f"];
-----------------------------------------------

★배열 맨앞에 요소 추가하기(unshift)

-----------------------------------------------
const target = ['나', '다', '라', '마', '바'];
  target[0] = '가';
  console.log(target);

  (5) ["가", "다", "라", "마", "바"]
-----------------------------------------------

index값인 0을 쓰면 변경, 수정되어버림
맨앞에 추가하려면 unshift라는 기능 실행

-----------------------------------------------
const target = ['나', '다', '라', '마', '바'];
  target.unshift('가');
  console.log(target);

  (6) ["가", "나", "다", "라", "마", "바"]
-----------------------------------------------

★배열 맨뒤에 요소 추가하기(push)


★const인데 수정 가능한 이유

const에는 새로운 값을 대입(=)하지 못한다
const에 객체(배열, 함수, 객체 리터럴)가 대입되면 객체 내부의 속성이나 배열의 요소는 수정할 수 있습니다.

-------------------------------------------------
const target2 = ['a', 'b', 'c', 'd', 'e'];
  target2 = ['f', 'g']; // 불가능
  target2[0] = 'h'; // 가능
-------------------------------------------------

★배열에서 요소 제거하기(pop, shift,splice)

어떤 요소를 제거한다면 그 뒤에 위치한 나머지 요소의 인덱스를 모두 1씩 앞으로 당겨야 함

push, pop(마지막 요소 추가, 제거)
------------------------------------------------
const target = ['가', '나', '다', '라', '마'];
  target.pop();
  console.log(target);

  (4) ["가", "나", "다", "라"]
------------------------------------------------

unshift, shift(첫번째 요소 추가, 제거)
-----------------------------------------------
const target = ['가', '나', '다', '라', '마'];
  target.shift();
  console.log(target);

  (4) ["나", "다", "라", "마"]
-----------------------------------------------

splice (중간요소 제거)

첫번째값은 시작 인덱스
두번째값은 제거할 요소 갯수
-----------------------------------------------
const target = ['가', '나', '다', '라', '마'];
  target.splice(1, 1); // (시작 인덱스, 제거할 요소 갯수)
  console.log(target);

  (4) ["가", "다", "라", "마"]
-----------------------------------------------

값을 하나만 쓰면 인덱스값 뒤에 전부 제거
-----------------------------------------------
const target = ['가', '나', '다', '라', '마'];
  target.splice(1);
  console.log(target);

  (1) ["가"]
------------------------------------------------

값을 제거뿐만 아니라 제거한 자리에 다른 값을 넣을수도 있음
------------------------------------------------
const target = ['가', '나', '다', '라', '마'];
  target.splice(1, 3, '타', '파');
  console.log(target);

  (4) ["가", "타", "파", "마"]
------------------------------------------------

제거안하고 값만 넣을수도 있음
------------------------------------------------
const target = ['가', '나', '다', '라', '마'];
  target.splice(2, 0, '바');
  console.log(target);

(6)['가', '나', '바', '다', '라', '마']
------------------------------------------------

★배열에서 요소찾기(includes)

includes에 주어진 값이 배열에 존재하면 true가 되고, 존재하지 않으면 false가 됨
-----------------------------------------------
const target = ['가', '나', '다', '라', '마'];
  const result = target.includes('다'); // '다'가 있는지 검색
  const result2 = target.includes('카'); // '카'가 있는지 검색
  console.log(result);
  console.log(result2);

  true
  false
----------------------------------------------

검색하고 싶은 값이 몇 번째 인덱스에 위치하는지(indexOf, lastIndexOf)

-----------------------------------------------
 const target = ['라', '나', '다', '라', '다'];
  const result = target.indexOf('다'); // 앞에부터 몇번째
  const result2 = target.lastIndexOf('라'); // 뒤에서부터 몇번째
  const result3 = target.indexOf('가');
  console.log(result);
  console.log(result2);
  console.log(result3);

  2
  3
  -1 // 없으면 -1
-----------------------------------------------

★배열 반복하기

while문
-----------------------------------------------
const target = ['가', '나', '다', '라', '마'];
  let i = 0;
  while (i < target.length) {
    console.log(target[i]);
    i++;
  }

  가
  나
  다
  라
  마
  4
-----------------------------------------------

for문
-----------------------------------------------
const target = ['가', '나', '다', '라', '마'];
  for (let i = 0; i < target.length; i++) {
    console.log(target[i]);
  }

  가
  나
  다
  라
  마
-----------------------------------------------

2 - 6 - 2 함수

프로그래밍에서 함수(function)는 특정한 작업을 수행하는 코드를 의미
함수를 미리 만들어 두고 원할 때 실행해 정해진 작업을 수행하게 할 수 있음.

function 예약어를 사용하거나 =>(화살표) 기호를 사용

-----------------------------------------------
function() {}
// 또는
() => {} // 화살표 함수
-----------------------------------------------

이름이 없으므로 다른 곳에서 사용할 수 없음. 
함수에 이름을 붙이면 다른 곳에서 사용할 수 있음.
-----------------------------------------------
function a() {} // 함수 선언문

//함수 표현식
const b = function() {}; 
const c = () => {};
-----------------------------------------------

★함수 선언문
함수를 상수에 대입하지 않고 function 키워드 뒤에 함수 이름을 넣는 방식

★함수 표현식
상수나 변수에 대입하는 방식

if 문, for 문, while 문, 함수 선언문의 중괄호 뒤에는 세미콜론이 붙이지 않아도 됨

-----------------------------------------------
> function a() {} // 선언한다
  a(); // 호출한다

  (없음)
-----------------------------------------------

★return 이해하기

-----------------------------------------------
function a() {}
< undefined // 반환값
> a();
< undefined // 반환값
-----------------------------------------------

-----------------------------------------------
function a() {}

// 두 코드는 동일함

function a() {
  return undefined;
}

function a() {
  return;
}
-----------------------------------------------

return은 함수를 종료시킴
-----------------------------------------------

function a(){
  return 'hello'; // return은 함수를 종료시키므로
  console.log('hi'); // 실행안됨
}

a();
hello
-----------------------------------------------

이것을 이용해 조건문을 만들수 있음
-----------------------------------------------
> function a() {
    if (false) {
      return;
    }// false 일때 return undefined
    console.log(‘실행됩니다.’); // ture 일때 '실행됩니다'
  }
  a();

  실행됩니다.
-----------------------------------------------


★매개변수와 인수 사용하기 (parameter, argument)

함수 a를 선언할 때 소괄호에 넣은 parameter와 argument연결
parameter = 'argument'
parameter는 변수와 같은 특성

-------------------------------------------------
 function a(parameter) {
    console.log(parameter);
  }
  a('argument');

  argument
------------------------------------------------
함수를 선언할때는
parameter(매개변수)
  
함수를 실행,호출할때는
argument(인수)

---------------------------------------------
> function a(w, x, y, z) {
    console.log(w, x, y, z);
    console.log(arguments);
  }
  a('Hello', 'Parameter', 'Argument');

  Hello Parameter Argument undefined
  Arguments(3) ['Hello', 'Parameter', 'Argument', callee: ƒ, Symbol(Symbol.iterator): ƒ]
---------------------------------------------
함수가 하나의 매개변수와 하나의 인수만을 가지는 것은 아님
각각 여러 개를 가질 수 있고, 매개변수와 인수의 개수가 일치하지 않아도 됨
매개변수의 개수로 인수의 개수를 추정할 수 없음
인수가 몇개 들어왔는지 궁금하다면 함수 내에 배열인 arguments를 출력

뒤에 나오는 callee나 Symbol(Symbol.iterator)는 인수가 아니므로 무시

★다른변수 사용하기

함수 안에서 변수나 상수를 선언할 수도 있음
함수 바깥에 위치한 변수나 상수를 사용할 수도 있음

---------------------------------------------
// const a = 100;

 function minus1(x, y) {
    const a = 100;
    return (x - y) * a;
  }
  console.log(minus1(5, 3));

  200
---------------------------------------------

순수 함수 = 안에다가 변수 선언 


2 - 6 - 3 객체 리터널

여러 개의 변수를 하나의 변수로 묶을 때 사용

----------------------------------
const name = '조현영';
const year = 1994;
const month = 8;
const date = 12;
const gender = 'M';
----------------------------------

이미 name, year, month, date, gender 변수를 선언했으므로 다른 사람을 표현할 때 이 변수들을 사용할 수 없음
이럴 때 객체를 사용하면 여러 개의 변수를 하나로 묶을 수 있음

----------------------------------
const zerocho = {
  name: '조현영',
  year: 1994,
  month: 8,
  date: 12,
  gender: 'M',
};
----------------------------------

----------------------------------
const 객체 = {
  속성1이름: 속성1값, //속성 1
  속성2이름: 속성2값, //속성 2
  속성3이름: 속성3값, //속성 3
}//객체 리터널
----------------------------------

속성 이름은 앞에 숫자가 오거나, 띄어쓰기, 특수문자가 오면 ' '안에 쓰기


속성값에 접근하는 방법
----------------------------------
console.log(zerocho.속성이름);
console.log(zerocho['속성이름']);
----------------------------------



----------------------------------

----------------------------------



----------------------------------

----------------------------------



----------------------------------

----------------------------------



----------------------------------

----------------------------------


























1분 퀴즈

--------------------------------
8. arr라는 배열이 있을 때, 배열의 마지막에서 세 번째 요소를 찾아보세요.

const arr = [1, 2, 3, 4, 5]
arr[arr.length - 1] //마지막 인덱스 
5
arr[arr.length - 3] //끝에서 3번째 인덱스
3


--------------------------------
9. 다음 배열에서 ‘라’를 모두 제거하세요. indexOf와 splice를 사용하세요.

----while문----

while(arr.indexOf('라') > -1) {
    arr.splice(arr.indexOf('라'), 1)
}
['라']
arr
(3) ['가', '다', '마']

----for문----

for(i = 0; -1 < arr.indexOf('라'); i++){
    arr.splice(arr.indexOf('라'), 1)
}
arr
(3) ['가', '다', '마']

----변수 선언-----

let index = arr.indexOf('라');
while(-1 < index){
    arr.splice(index, 1);
}
arr
(3) ['가', '다', '마']


while(-1 < index){
    arr.splice(index, 1);
    index=arr.indexOf('라');
}
arr
(3) ['가', '다', '마']

//질문하기 
//영상에서는 안될거라고 했는데 됨

--------------------------------
10.  매개변수로 x, y, z을 받아 곱한 값을 반환하는 multiply 함수를 만들어 보세요. 단, 화살표 함수로 만드세요.

const m = (x, y, z) => { return x * y * z ; }

const m = (x, y, z) => x * y * z ; 
// 화살표 함수 뒤에 바로 return이 나온다면 괄호랑 return 생략 가능
